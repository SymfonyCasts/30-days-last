WEBVTT

00:00:01.116 --> 00:00:04.706 align:middle
¡Hemos llegado al último día de LAST Stack!

00:00:04.966 --> 00:00:06.966 align:middle
Llevaba 30 días esperando para decir eso.

00:00:07.636 --> 00:00:12.496 align:middle
Hoy hablaremos de rendimiento, empezando
por las cosas que no estamos haciendo.

00:00:12.936 --> 00:00:17.246 align:middle
Por ejemplo, no estamos combinando
archivos para reducir las peticiones.

00:00:17.556 --> 00:00:20.376 align:middle
Y no estamos minificando archivos.

00:00:20.896 --> 00:00:24.826 align:middle
No, estamos sirviendo archivos fuente sin
procesar desde nuestro directorio assets/.

00:00:25.366 --> 00:00:28.646 align:middle
Y sin embargo, ¡nuestro frontend es rápido!

00:00:29.256 --> 00:00:31.826 align:middle
Abre tus herramientas de
depuración y ve a Lighthouse.

00:00:32.546 --> 00:00:35.996 align:middle
Hagamos un perfil de rendimiento en el
escritorio para simplificar las cosas.

00:00:37.266 --> 00:00:40.756 align:middle
Dale unos segundos para que se ejecute y...

00:00:41.496 --> 00:00:44.856 align:middle
¡boom! ¡99! ¡Es increíble!

00:00:45.656 --> 00:00:47.576 align:middle
Desplázate hacia abajo para
ver lo que podríamos mejorar.

00:00:48.846 --> 00:00:51.156 align:middle
El problema número uno
es que falta compresión.

00:00:51.806 --> 00:00:56.226 align:middle
Hay dos cosas en las que debes pensar cuando
despliegues tu aplicación con AssetMapper.

00:00:56.776 --> 00:01:01.906 align:middle
Primero: en tu servidor web, activa
la compresión, como gzip o Brotli.

00:01:02.666 --> 00:01:07.426 align:middle
O puedes hacer proxy de tu sitio a través de
Cloudflare y que haga la compresión por ti.

00:01:07.806 --> 00:01:08.716 align:middle
Eso es lo que hacemos nosotros.

00:01:09.416 --> 00:01:14.616 align:middle
Por eso no tenemos que preocuparnos de la minificación
: si te limitas a comprimir tus archivos CSS

00:01:14.616 --> 00:01:18.466 align:middle
y JavaScript, eso hace casi tan
buen trabajo como la minificación.

00:01:19.136 --> 00:01:23.636 align:middle
La segunda cosa que tienes que hacer -que
debería mencionarse aquí abajo, ah sí:

00:01:23.896 --> 00:01:27.346 align:middle
Servir los activos estáticos con
una política de caché eficiente.

00:01:28.106 --> 00:01:31.956 align:middle
Como todos nuestros archivos tienen un hash de
versión automático en el nombre del archivo,

00:01:32.136 --> 00:01:36.686 align:middle
debes configurar tu servidor web para que almacene en
caché todo lo que haya en tu directorio assets/...

00:01:36.926 --> 00:01:42.296 align:middle
para siempre. Esto significa que cuando tu usuario
descargue un archivo, lo almacenará en caché para siempre:

00:01:42.636 --> 00:01:44.686 align:middle
nunca tendrá que volver a descargarlo.

00:01:44.996 --> 00:01:46.706 align:middle
Eso es estupendo para el rendimiento.

00:01:47.546 --> 00:01:48.586 align:middle
Veamos qué más tenemos.

00:01:49.106 --> 00:01:51.066 align:middle
Reducir el CSS no utilizado.

00:01:51.406 --> 00:01:53.176 align:middle
Probablemente no sea un problema.

00:01:53.586 --> 00:01:55.986 align:middle
De hecho, es una de las ventajas de Tailwind:

00:01:56.326 --> 00:01:59.476 align:middle
sólo construye el CSS que
realmente estamos utilizando.

00:02:00.036 --> 00:02:03.916 align:middle
Supongo que el resto del CSS se
utiliza en páginas diferentes.

00:02:04.376 --> 00:02:06.706 align:middle
Y la diferencia es aún menor de lo que parece.

00:02:07.146 --> 00:02:09.096 align:middle
Esto son 38 kilobytes...

00:02:09.216 --> 00:02:10.566 align:middle
antes de la compresión.

00:02:10.946 --> 00:02:13.396 align:middle
En producción, la diferencia
sería mucho menor.

00:02:14.096 --> 00:02:17.656 align:middle
Bajo reducir JavaScript no
utilizado, hay un elemento principal:

00:02:17.966 --> 00:02:21.726 align:middle
es el JavaScript de Live
Components, que es bastante grande.

00:02:22.336 --> 00:02:26.856 align:middle
Lo estamos utilizando, pero es cierto que
aún no utilizamos muchas de sus funciones.

00:02:27.816 --> 00:02:31.296 align:middle
En producción, debido a la
compresión, sería más pequeño...

00:02:31.596 --> 00:02:33.796 align:middle
y vamos a optimizarlo un poco.

00:02:34.886 --> 00:02:37.816 align:middle
Lo siguiente es: eliminar los recursos
que bloquean la renderización.

00:02:38.586 --> 00:02:41.546 align:middle
Esto es importante y
enumera nuestro archivo CSS.

00:02:41.826 --> 00:02:43.496 align:middle
Volveremos a esto en unos minutos.

00:02:43.956 --> 00:02:44.766 align:middle
Pero en realidad...

00:02:44.916 --> 00:02:46.106 align:middle
no hay nada importante.

00:02:46.486 --> 00:02:50.396 align:middle
Podríamos minificar el CSS, pero
apenas supondría una diferencia.

00:02:50.806 --> 00:02:56.886 align:middle
Minificar JavaScript - 68 kilobytes parece bueno,
pero de nuevo, eso es antes de comprimirlo.

00:02:57.276 --> 00:02:59.176 align:middle
¡Y recuerda nuestra puntuación de 99!

00:02:59.336 --> 00:03:00.906 align:middle
¡Nuestro frontend es rápido!

00:03:01.426 --> 00:03:04.706 align:middle
Aunque parece que mis imágenes
son demasiado grandes.

00:03:05.086 --> 00:03:07.716 align:middle
Todavía hay algunas cosas que
tienes que manejar por tu cuenta.

00:03:08.546 --> 00:03:12.086 align:middle
Una de las principales razones por las que nuestra
aplicación ya es tan rápida es la precarga.

00:03:12.776 --> 00:03:13.896 align:middle
Mira el código fuente de la página.

00:03:14.586 --> 00:03:19.346 align:middle
Tenemos el mapa de importación, un montón
de precargas, y luego lo más importante:

00:03:19.446 --> 00:03:21.576 align:middle
<script type="module">, import 'app'.

00:03:22.636 --> 00:03:27.856 align:middle
Cuando nuestro navegador ve esto, conecta app con
el nombre de archivo real y empieza a descargarlo.

00:03:29.306 --> 00:03:32.466 align:middle
Las etiquetas de script de módulo
no son "bloqueantes de renderizado".

00:03:32.986 --> 00:03:35.786 align:middle
Esto significa que el navegador
comienza a descargar este archivo,

00:03:36.136 --> 00:03:39.876 align:middle
pero continúa renderizando la
página visualmente mientras lo hace.

00:03:40.456 --> 00:03:45.306 align:middle
Pero, por supuesto, no puede ejecutar nuestro
JavaScript hasta que termine de descargar app.js.

00:03:45.306 --> 00:03:48.286 align:middle
Y ahí se esconde un problema.

00:03:48.906 --> 00:03:53.666 align:middle
Sólo cuando termina de descargar
app.js se da cuenta de que...

00:03:53.946 --> 00:03:56.946 align:middle
también necesita descargar este archivo,
y este archivo, y este archivo, y

00:03:56.946 --> 00:03:59.756 align:middle
este archivo, y este archivo.

00:04:00.116 --> 00:04:05.736 align:middle
Y sólo después de descargar bootstrap.js se da
cuenta de que necesita descargar este archivo.

00:04:06.606 --> 00:04:11.926 align:middle
Puedes imaginarte una gran cascada: termina
un archivo JavaScript, inicia algunos más,

00:04:12.196 --> 00:04:14.706 align:middle
los termina, y luego inicia aún más.

00:04:15.246 --> 00:04:18.676 align:middle
Nuestro JavaScript podría tardar
mucho tiempo en ejecutarse finalmente.

00:04:19.716 --> 00:04:21.776 align:middle
Aquí es donde entran en juego las precargas.

00:04:22.416 --> 00:04:25.146 align:middle
Esto le dice a nuestro navegador:
Aún no te has dado cuenta,

00:04:25.356 --> 00:04:28.216 align:middle
pero deberías empezar a descargar
estos archivos inmediatamente.

00:04:29.306 --> 00:04:31.166 align:middle
La forma en que se generan es realmente genial.

00:04:31.646 --> 00:04:34.206 align:middle
Abre templates/base.html.twig.

00:04:35.526 --> 00:04:39.806 align:middle
Todo esto se genera gracias a
importmap('app'): Al pasar app,

00:04:40.356 --> 00:04:44.996 align:middle
el efecto principal es que añade la etiqueta
script en la parte inferior que importa app.

00:04:45.586 --> 00:04:50.406 align:middle
Pero esto también le dice a AssetMapper que analice
app.js, encuentre todos los archivos que importa

00:04:50.406 --> 00:04:53.906 align:middle
y los añada como precargas.

00:04:54.226 --> 00:04:59.446 align:middle
Y lo hace recursivamente: entra en
bootstrap.js y encuentra su importación.

00:04:59.966 --> 00:05:03.286 align:middle
Encuentra todo el JavaScript que
se necesita al cargar la página

00:05:03.536 --> 00:05:06.276 align:middle
y se asegura de que cada
archivo esté precargado.

00:05:06.576 --> 00:05:08.086 align:middle
Simplemente funciona.

00:05:08.366 --> 00:05:09.716 align:middle
Y podemos verlo visualmente.

00:05:10.336 --> 00:05:14.466 align:middle
En alien-greeting.js: comenta
la importación del archivo CSS:

00:05:14.786 --> 00:05:20.206 align:middle
el retraso sólo hace que la cascada sea más
difícil de ver: Luego ve a la pestaña Red,

00:05:20.926 --> 00:05:24.426 align:middle
mira sólo en JavaScript y haz
una actualización forzada.

00:05:25.176 --> 00:05:25.816 align:middle
¡Compruébalo!

00:05:26.226 --> 00:05:28.856 align:middle
¡Todos los archivos JavaScript
se inician al mismo tiempo!

00:05:29.316 --> 00:05:33.296 align:middle
No está esperando a que se descargue
nada: todos se inician inmediatamente.

00:05:33.666 --> 00:05:34.976 align:middle
Eso es lo que queremos ver.

00:05:35.756 --> 00:05:38.666 align:middle
El único archivo que se inicia más
tarde es celebrate-controller.js...

00:05:38.716 --> 00:05:42.166 align:middle
porque lo hemos configurado
para que sea perezoso.

00:05:42.936 --> 00:05:44.966 align:middle
Esto significa que nuestro
JavaScript se inicializa

00:05:45.226 --> 00:05:49.196 align:middle
y luego descarga este controlador
sólo cuando es necesario...

00:05:49.196 --> 00:05:53.106 align:middle
que es siempre, porque está en todas las
páginas, pero aún así se retrasa un poco.

00:05:53.956 --> 00:05:55.356 align:middle
Ordena esto por tamaño de archivo.

00:05:56.556 --> 00:05:59.196 align:middle
El archivo más grande es el
JavaScript para Live Components.

00:05:59.686 --> 00:06:04.356 align:middle
Estos 123 kilobytes no están comprimidos, por
lo que serán más pequeños en producción.

00:06:05.056 --> 00:06:09.476 align:middle
Pero como sólo lo necesitamos en la búsqueda
global, podemos optar por retrasar su carga.

00:06:10.436 --> 00:06:14.966 align:middle
Para ello, dentro de assets/controllers.json,
busca el controlador de Componentes Vivos

00:06:15.106 --> 00:06:19.466 align:middle
y establece fetch en lazy: Haz
una actualización forzada.

00:06:20.576 --> 00:06:23.466 align:middle
Sigue ahí, pero comprueba el iniciador:

00:06:23.726 --> 00:06:27.506 align:middle
es de un archivo JavaScript
y se inicia mucho más tarde.

00:06:28.286 --> 00:06:30.956 align:middle
En el código fuente, busca live_controller.

00:06:31.906 --> 00:06:34.096 align:middle
Antes estaba precargado.

00:06:34.696 --> 00:06:39.706 align:middle
Ahora, cuando actualizamos, sigue en el mapa
de importación, pero ya no está precargado.

00:06:40.326 --> 00:06:45.186 align:middle
Precargamos lo realmente importante, y dejamos
que el controlador en vivo se cargue después.

00:06:46.196 --> 00:06:48.496 align:middle
Ok una última cosa, cosa mágica. Lo

00:06:49.096 --> 00:06:53.736 align:middle
más importante que vimos dentro de Lighthouse
fue el recurso de bloqueo de renderizado

00:06:53.786 --> 00:06:55.056 align:middle
para nuestro archivo CSS.

00:06:56.406 --> 00:07:01.746 align:middle
Cuando tu navegador ve una etiqueta <link
rel="stylesheet">, congela la renderización de la página

00:07:01.746 --> 00:07:03.736 align:middle
hasta que termina de descargar el archivo.

00:07:04.126 --> 00:07:08.906 align:middle
Y eso es bueno: no queremos que nuestra
página se renderice sin estilo ni un segundo.

00:07:09.416 --> 00:07:14.766 align:middle
Y por eso ponemos nuestras etiquetas CSS link en
el head de la página: queremos que el navegador

00:07:14.766 --> 00:07:18.946 align:middle
se dé cuenta de que necesita
descargar el archivo lo antes posible.

00:07:19.286 --> 00:07:24.956 align:middle
Sin embargo, hay una forma de decirle a nuestro navegador
incluso antes que necesita descargar este archivo.

00:07:26.316 --> 00:07:31.846 align:middle
Busca tu terminal y ejecuta: composer require
symfony/web-link Este es un pequeño paquete

00:07:31.846 --> 00:07:35.386 align:middle
que puede ayudar a añadir pistas a tu
navegador sobre lo que necesita descargar.

00:07:35.806 --> 00:07:38.326 align:middle
AssetMapper viene con una
integración especial para ello.

00:07:38.926 --> 00:07:43.126 align:middle
Observa: sólo con instalarlo, ve
a la pestaña Red, filtra todo,

00:07:43.456 --> 00:07:47.226 align:middle
actualiza y ve arriba a la
petición principal de la página.

00:07:47.846 --> 00:07:49.656 align:middle
Mira aquí abajo en las cabeceras de Respuesta.

00:07:50.266 --> 00:07:51.356 align:middle
¡Ahí está!

00:07:51.356 --> 00:07:55.716 align:middle
Nuestra aplicación acaba de añadir una
nueva cabecera de respuesta llamada link que

00:07:55.716 --> 00:07:58.666 align:middle
apunta al archivo CSS con rel="preload".

00:07:59.426 --> 00:08:01.996 align:middle
Esto indica al navegador que
debe descargar este archivo.

00:08:01.996 --> 00:08:07.726 align:middle
Y ve esta cabecera incluso antes
de ver la línea 11 del HTML.

00:08:08.776 --> 00:08:11.236 align:middle
Esto ayuda un poco más al rendimiento.

00:08:11.236 --> 00:08:15.006 align:middle
Ahora que hemos hecho algunos cambios,
volvamos a ejecutar Lighthouse.

00:08:15.676 --> 00:08:20.136 align:middle
Hay cierta variabilidad en estas ejecuciones,
así que si tu puntuación no cambia

00:08:20.136 --> 00:08:22.926 align:middle
o incluso baja un poco, no te preocupes.

00:08:23.796 --> 00:08:26.356 align:middle
Pero ¡un 100 perfecto!

00:08:26.486 --> 00:08:28.636 align:middle
¡Guau! Y lo que es más importante....

00:08:28.906 --> 00:08:30.656 align:middle
seguimos teniendo compresión de texto...

00:08:30.826 --> 00:08:33.986 align:middle
pero no vemos el aviso de bloqueo
de recursos de renderizado.

00:08:34.626 --> 00:08:39.366 align:middle
La moraleja de la historia es la siguiente: utilizar
AssetMapper es rápido desde el primer momento.

00:08:39.866 --> 00:08:42.426 align:middle
Aparte de añadir compresión y
almacenamiento en caché a tu servidor web,

00:08:42.666 --> 00:08:45.096 align:middle
puedes codificar
tranquilamente sin preocuparte.

00:08:45.516 --> 00:08:51.516 align:middle
Y claro, más adelante, es útil ejecutar Lighthouse
y ver cómo puedes mejorar, pero no tiene por qué

00:08:51.516 --> 00:08:53.496 align:middle
ser algo en lo que pienses día a día.

00:08:53.826 --> 00:08:55.516 align:middle
En lugar de eso, haz tu trabajo de verdad.

00:08:56.176 --> 00:08:57.666 align:middle
Y... ¡hemos terminado!

00:08:58.126 --> 00:09:00.916 align:middle
¡Gracias por pasar estos
30 días salvajes conmigo!

00:09:01.176 --> 00:09:04.066 align:middle
Ha sido un placer absoluto
y un viaje increíble.

00:09:04.406 --> 00:09:07.226 align:middle
Por favor, ¡ve a construir
cosas y cuéntanos qué son!

00:09:07.226 --> 00:09:11.086 align:middle
Y si tienes alguna pregunta,
comentario, duda o chiste malo,

00:09:11.216 --> 00:09:13.336 align:middle
siempre estamos aquí para ti
en la sección de comentarios.

00:09:14.256 --> 00:09:15.756 align:middle
Muy bien amigos, ¡hasta la próxima!
